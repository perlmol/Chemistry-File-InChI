# Header section

%%

# Rules section

# The grammar is taken from https://github.com/metamolecular/inchi-grammar/blob/master/grammar.ebnf, commit 74a8858, MIT license

string: prefix
      | prefix formula
      | prefix connections
      | prefix h_atoms
      | prefix formula connections
      | prefix formula h_atoms
      | prefix connections h_atoms
      | prefix formula connections h_atoms
      ;

formula: formula_first
       | formula formula_continuation
       ;

connections: '/' 'c'
           | '/' 'c' graph
           | connections ';'
           | connections ';' graph
           ;

h_atoms: '/' 'h'
       | '/' 'h' hydrogens
       | h_atoms ';'
       | h_atoms ';' hydrogens
       ;

graph: index body
     | count '*' index body
     ;

body: '-' tail
    | branches tail
    ;

bodies: body
      | bodies body
      ;

branch: '(' index ')'
      | '(' index branch_body ')'
      ;

branch_body: ',' index
           | body
           | branch_body branch_body ;

branches: branch
        | branches branch
        ;

tail: index
    | tail body
    ;

hydrogens: vh_count
         | vh_count mh_counts
         | count '*' vh_count
         | count '*' vh_count mh_counts
         | mh_count
         ;

vh_count: virtual_hydrogens
        | vh_count ',' virtual_hydrogens
        ;

mh_count: mobile_hydrogens
        | mh_count mobile_hydrogens
        ;

mh_counts: ',' mh_count
         | mh_counts ',' mh_count
         ;

virtual_hydrogens: index 'H'
                 | index comma_or_dash_separated_indexes 'H'
                 | index 'H' count ;
                 | index comma_or_dash_separated_indexes 'H' count ;

mobile_hydrogens: '(' 'H' comma_separated_indexes ')'
                | '(' 'H' '-' comma_separated_indexes ')'
                | '(' 'H' count '-' comma_separated_indexes ')'
                | '(' 'H' count comma_separated_indexes ')'
                ;

comma_separated_indexes: ',' index
                       | comma_separated_indexes ',' index
                       ;

comma_or_dash_separated_indexes: comma_separated_indexes
                               | comma_separated_indexes '-' index
                               | '-' index
                               ;

index: nonzero
     | index digit
        {
            return join '', @_;
        }
     ;

count: '1' digit
        {
            return join '', @_;
        }
     | count digit
        {
            return join '', @_;
        }
     | twoplus
     ;

digit: '0' | nonzero ;

nonzero: '1' | twoplus ;

twoplus: '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' ;

%%

# Footer section

sub _Lexer
{
    my( $self ) = @_;

    # If the line is empty and the input is originating from the file,
    # another line is read.
    if( !$self->YYData->{INPUT} && $self->{USER}{FILEIN} ) {
        my $filein = $self->{USER}{FILEIN};
        $self->YYData->{INPUT} = <$filein>;
        $self->{USER}{CHARNO} = 0;
    }

    # Prefix
    if( $self->YYData->{INPUT} =~ s/^(InChI=1S?)// ) {
        return ( 'prefix', $1 );
    }

    # Formula parts
    # TODO: Check Hill order, require counts > 1
    if( $self->YYData->{INPUT} =~ s/^([\/\.])([A-Z][a-z]?\d*)+// ) {
        if( $1 eq '\/') {
            return ( 'formula_first', $2 );
        } else {
            return ( 'formula_continuation', $2 );
        }
    }

    # Any other character
    if( $self->YYData->{INPUT} =~ s/^(.)// ) {
        return ( $1, $1 );
    }

    return ( '', '' );
}

1;
