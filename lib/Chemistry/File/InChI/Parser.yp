# Header section

%{

use strict;
use warnings;

use Chemistry::Atom;
use Chemistry::Mol;

%}

%%

# Rules section

# The grammar is taken from https://github.com/metamolecular/inchi-grammar/blob/master/grammar.ebnf, commit 74a8858, MIT license

string: prefix
      | prefix formula
      | prefix connections
      | prefix h_atoms
      | prefix formula connections
      | prefix formula h_atoms
      | prefix connections h_atoms
      | prefix formula connections h_atoms
      ;

formula: formula_first
            { return [ $_[1] ] }
       | formula formula_continuation
            { push @{$_[1]}, $_[2] }
       ;

connections: '/' 'c'
                { $_[0]->{USER}{CURSOR}++ }
           | '/' 'c' graph
                { $_[0]->{USER}{CURSOR}++ }
           | connections ';'
                { $_[0]->{USER}{CURSOR}++ }
           | connections ';' graph
                { $_[0]->{USER}{CURSOR}++ }
           ;

h_atoms: '/' 'h'
            { $_[0]->{USER}{CURSOR}++ }
       | '/' 'h' hydrogens
            { $_[0]->{USER}{CURSOR}++ }
       | h_atoms ';'
            { $_[0]->{USER}{CURSOR}++ }
       | h_atoms ';' hydrogens
            { $_[0]->{USER}{CURSOR}++ }
       ;

# Production 'tail' is merged to 'graph' and 'body' for simplicity.

graph: chain
     | count '*' chain
     ;

# Return: The last atom in a chain
chain: index '-' index
        { $_[0]->_add_bonds( $_[1], $_[3] ); return $_[3] }
     | index branches index
        { $_[0]->_add_bonds( $_[1], [ @{$_[2]}, $_[3] ] ); return $_[3] }
     | chain '-' index
        { $_[0]->_add_bonds( $_[1], $_[3] ); return $_[3] }
     | chain branches index
        { $_[0]->_add_bonds( $_[1], [ @{$_[2]}, $_[3] ] ); return $_[3] }
     ;

branch: '(' branch_body ')' { return $_[2]->{bonds} } ;

# Return: Array with all atoms connected to the parent one
branch_body: index
                { return { bonds => [ $_[1] ], last => $_[1] } }
           | branch_body ',' index
                {
                    push @{$_[1]->{bonds}}, $_[3];
                    $_[1]->{last} = $_[3];
                    return $_[1];
                }
           | branch_body '-' index
                {
                    $_[0]->_add_bonds( $_[1]->{last}, $_[3] );
                    $_[1]->{last} = $_[3];
                    return $_[1];
                }
           | branch_body branches index
                {
                    $_[0]->_add_bonds( $_[1]->{last}, [ @{$_[2]}, $_[3] ] );
                    $_[1]->{last} = $_[3];
                    return $_[1];
                }
           ;

branches: branch
            { return $_[1] }
        | branches branch
            { return [ @{$_[1]}, @{$_[2]} ] }
        ;

hydrogens: vh_count
         | vh_count mh_counts
         | count '*' vh_count
         | count '*' vh_count mh_counts
         | mh_count
         ;

vh_count: virtual_hydrogens
        | vh_count ',' virtual_hydrogens
        ;

mh_count: mobile_hydrogens
        | mh_count mobile_hydrogens
        ;

mh_counts: ',' mh_count
         | mh_counts ',' mh_count
         ;

virtual_hydrogens: virtual_hydrogen_receivers 'H'
                    { $_[0]->_add_hydrogens( $_[1] ) }
                 | virtual_hydrogen_receivers 'H' count
                    { $_[0]->_add_hydrogens( $_[1], $_[3] ) }
                 ;

virtual_hydrogen_receivers: index
                            { return [ $_[1] ] }
                          | virtual_hydrogen_receivers ',' index
                            {
                                push @{$_[1]}, $_[3];
                                return $_[1];
                            }
                          | virtual_hydrogen_receivers '-' index
                            {
                                push @{$_[1]}, ($_[1]->[-1] + 1)..$_[3];
                                return $_[1]
                            }
                          ;

mobile_hydrogens: '(' 'H' comma_separated_indexes ')'
                | '(' 'H' '-' comma_separated_indexes ')'
                | '(' 'H' count '-' comma_separated_indexes ')'
                | '(' 'H' count comma_separated_indexes ')'
                ;

comma_separated_indexes: ',' index
                            { return [ $_[2] ] }
                       | comma_separated_indexes ',' index
                            {
                                push @{$_[1]}, $_[3];
                                return $_[1];
                            }
                       ;

index: '1' | count ;

count: '1' digit
        {
            return join '', @_[1..2];
        }
     | count digit
        {
            return join '', @_[1..2];
        }
     | twoplus
     ;

digit: '0' | '1' | twoplus ;

twoplus: '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' ;

%%

# Footer section

sub parse
{
    my( $self, $string ) = @_;

    $self->YYData->{INPUT} = $string;
    $self->{USER}{MOL}     = Chemistry::Mol->new;
    $self->{USER}{CURSOR}  = 0;
    $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error, yydebug => 0 );

    return $self->{USER}{MOL};
}

sub _Lexer
{
    my( $self ) = @_;

    # If the line is empty and the input is originating from the file,
    # another line is read.
    if( !$self->YYData->{INPUT} && $self->{USER}{FILEIN} ) {
        my $filein = $self->{USER}{FILEIN};
        $self->YYData->{INPUT} = <$filein>;
        $self->{USER}{CHARNO} = 0;
    }

    # Prefix
    if( $self->YYData->{INPUT} =~ s/^(InChI=1S?)// ) {
        return ( 'prefix', $1 );
    }

    # Formula parts
    # TODO: Check Hill order, require counts > 1
    if( $self->YYData->{INPUT} =~ s/^([\/\.])([2-9]|[1-9][0-9]+)?(([A-Z][a-z]?\d*)+)// ) {
        my( $sep, $count, $formula ) = ( $1, $2, $3 );
        $count = 1 unless $count;
        my %atom_map;

        while( $formula =~ /([A-Z][a-z]?)(\d*)/g ) {
            my( $element, $count ) = ( $1, $2 );
            next if $element eq 'H'; # H atoms will be added later
            $count = 1 unless $count;
            for (1..$count) {
                my $atom = Chemistry::Atom->new( symbol => $element );
                $self->{USER}{MOL}->add_atom( $atom );
                $atom_map{scalar( keys %atom_map ) + 1} = $atom;
            }
        }

        if( $sep eq '/') {
            $self->{USER}{ATOM_MAPS} = [ \%atom_map ];
            $self->{USER}{COUNTS}    = [ $count ];
            return ( 'formula_first', $formula );
        } else {
            push @{$self->{USER}{ATOM_MAPS}}, \%atom_map;
            push @{$self->{USER}{COUNTS}},    $count;
            return ( 'formula_continuation', $formula );
        }
    }

    # Reset cursor on 'h'
    if( $self->YYData->{INPUT} =~ s/^(h)// ) {
        $self->{USER}{CURSOR} = 0;
        return ( 'h', 'h' );
    }

    # Any other character
    if( $self->YYData->{INPUT} =~ s/^(.)// ) {
        return ( $1, $1 );
    }

    return ( '', '' );
}

sub _Error
{
    my( $self ) = @_;
    print STDERR "ERROR!\n";
}

sub _add_bonds
{
    my( $self, $a, $b ) = @_;

    my @bonds = ref $b eq 'ARRAY' ? @$b : $b;
    for (@bonds) {
        $self->{USER}{MOL}->new_bond( atoms => [ $self->_get_atom( $a ),
                                                 $self->_get_atom( $_ ) ] );
    }
}

sub _add_hydrogens
{
    my( $self, $atoms, $count ) = @_;

    my $atom_map = $self->{USER}{ATOM_MAPS}[$self->{USER}{CURSOR}];
    my @atoms = map { $atom_map->{$_} }
                    ref $atoms ? @$atoms : ( $atoms );
    $count = 1 unless $count;
    for my $atom (@atoms) {
        for (1..$count) {
            my $H = Chemistry::Atom->new( symbol => 'H' );
            $self->{USER}{MOL}->add_atom( $H );
            $self->{USER}{MOL}->new_bond( atoms => [ $atom, $H ] );
        }
    }
}

sub _get_atom
{
    my( $self, $atom ) = @_;

    my $atom_map = $self->{USER}{ATOM_MAPS}[$self->{USER}{CURSOR}];

    if( !exists $atom_map->{$atom} ) {
        # If an atom with given index does not exist, this is probably a hydrogen.
        # FIXME: Check if there are unused hydrogen atoms.

        my $H = Chemistry::Atom->new( symbol => 'H' );
        $self->{USER}{MOL}->add_atom( $H );
        $atom_map->{$atom} = $H;
    }

    return $atom_map->{$atom};
}

1;
